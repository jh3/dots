set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'rizzatti/dash.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'wgibbs/vim-irblack'
Plugin 'fugalh/desert.vim'
Plugin 'tomasr/molokai'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-commentary'
Plugin 'Raimondi/delimitMate'
Plugin 'scrooloose/syntastic'
Plugin 'ervandew/supertab'
Plugin 'gregsexton/MatchTag'
Plugin 'chrisbra/SudoEdit.vim'

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'

Plugin 'mileszs/ack.vim'
Plugin 'vim-scripts/renamer.vim'

call vundle#end()
filetype plugin indent on

set t_Co=256
set background=dark

syntax enable
colorscheme desert

set autoindent
set autoread       " Automatically reload changes if detected
set backspace=2    " Delete everything with backspace
set backup
set backupcopy=yes " see :help crontab"
set backupdir=~/.vim/backup
set cf                 " Enable error files & error jumping.
set cindent
set clipboard=unnamed
set complete=.,w,b,u,U
set completeopt=longest,menu
set directory=~/.vim/tmp
set encoding=utf-8
set expandtab
set foldlevelstart=99  " Remove folds
set formatoptions=crql
set hidden             " Change buffer - without saving
set history=768        " Number of things to remember in history.
set hlsearch
set ignorecase  " Case insensitive search
set incsearch
set laststatus=2    " Always show the statusline
set linebreak
set list      " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set matchtime=2 " How many tenths of a second to blink
set mouse=a     " Mouse in all modes
set mousehide   " Hide mouse after chars typed
set noerrorbells
set novisualbell
set ruler
set scrolloff=3 " show context above/below cursorline
set shiftwidth=2 " Tabs under smart indent
set showcmd
set showmatch   " Show matching brackets.
set smartcase   " Non-case sensitive search
set smarttab
set softtabstop=2
set statusline=
set statusline+=[%n%H%M%R%W]\  " flags and buf no
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, " file encoding
set statusline+=%{&ff}] " file format
set statusline+=%y\     " filetype
set statusline+=%t      " tail of filename
set statusline+=\ %{fugitive#statusline()} " git branch
set statusline+=%=      " left/right separator
set statusline+=%c,     " cursor column
set statusline+=%l/%L\  " cursor line/total lines
set statusline+=%P      " percent through file
set tabstop=8
set timeoutlen=350     " Time to wait for a command (after leader for example)
set t_vb=
set wildignore+=*.o,*.obj,*.exe,*.so,*.dll,*.pyc
set wildmenu           " Turn on Wild menu
set wildmode=longest,list,full
set wrap

let mapleader=","
" Fix crappy pasting of already formatted code
imap <Leader>p <C-O>:set paste<CR><C-r>*<C-O>:set nopaste<CR>
" Exit insert mode faster    
inoremap jw <Esc>
" Common typos
command W w
command Q q
map <F1> <Esc>
imap <F1> <Esc>
" Removes doc lookup binding because it's easy to fat finger
nmap K k
vmap K k
" Make line completion easier
imap <C-l> <C-x><C-l>
" Use ; for : in normal and visual mode, less keystrokes
nnoremap ; :
vnoremap ; :
" Double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
" Toggle invisible characters
nnoremap <Leader>i :set list!<CR>
" Clear recent search highlighting
nnoremap <Leader><space> :noh<CR>
" Toggle spelling mode with ,s
nmap <silent> <Leader>s :set spell!<CR>
" Window Movement
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-l> :wincmd l<CR>
" Previous Window
"nmap <silent> <C-p> :wincmd p<CR>
" Equal Size Windows
nmap <silent> <Leader>w= :wincmd =<CR>
" Window Splitting
nmap <silent> <Leader>s :split<CR>
nmap <silent> <Leader>v :vsplit<CR>
nmap <silent> <Leader>c :close<CR>

" md is markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown

autocmd BufRead,BufNewFile *.install setfiletype php
autocmd BufRead,BufNewFile *.test setfiletype php

" No formatting on o key newlines
autocmd BufNewFile,BufEnter * set formatoptions-=o

" No more complaining about untitled documents
autocmd FocusLost silent! :wa

" Change indentation for perl files
autocmd FileType perl setl sw=4 ts=4 sts=4 et

" Help make nice commit messages
autocmd FileType gitcommit highlight OverLength ctermbg=darkgrey guibg=#592929
autocmd FileType gitcommit match OverLength /\%72v.*/
autocmd FileType gitcommit setl tw=72 fo=cq wm=0

" CoffeeScript
autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" Auto-clean fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" When editing a file, always jump to the last cursor position.
" This must be after the uncompress commands.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line ("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" Plugin Configurations
" ---------------------
" SuperTab
" Set these up for cross-buffer completion (something Neocachecompl has a hard
" time with)
let g:SuperTabDefaultCompletionType="<c-x><c-n>"
let g:SuperTabContextDefaultCompletionType="<c-x><c-n>"

" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
" let g:syntastic_mode_map = { 'mode': 'active',
"       \ 'active_filetypes': ['install', 'module', 'inc', 'info', 'php'],
"       \ 'passive_filetypes': ['perl', 'bash', 'sh'] }
let g:syntastic_phpcs_disable=1

" Dash
nmap <silent> <leader>d <Plug>DashSearch
let g:dash_map = {
  \ 'module' : ['drupal', 'php'],
  \ 'inc' : ['drupal', 'php'],
  \ 'install' : ['drupal', 'php'],
  \ 'profile' : ['drupal', 'php']
  \ }

" Fugitive
nmap <Leader>gb :Gblame<CR>
nmap <Leader>gd :Gdiff<CR>
nmap <Leader>gx :wincmd h<CR>:q<CR> " Exit a diff by closing the diff window
nmap <Leader>gc :Gcommit<CR>
nmap <Leader>gs :Gstatus<CR>

" CtrlP
let g:ctrlp_working_path_mode = 1 " Set the working path to the parent dir of the current file
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$',
  \ 'file': '\.exe$\|\.so$\|\.dll$',
  \ }
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git/', 'cd %s && git ls-files'],
    \ },
  \ 'fallback': 'find %s -type f'
  \ }

" Vundle
nmap <Leader>bi :BundleInstall<CR>
nmap <Leader>bu :BundleInstall!<CR>
nmap <Leader>bc :BundleClean<CR>

" ack.vim
let g:ackprg = 'ag --nogroup --nocolor --column'

" Functions
" ---------
" Fix Trailing White Space
map <Leader>ws :%s/\s\+$//e<CR>
command! FixTrailingWhiteSpace :%s/\s\+$//e

" Quick spelling fix (first item in z= list)
function! QuickSpellingFix()
  if &spell
    normal 1z=
  else
    " Enable spelling mode and do the correction
    set spell
    normal 1z=
    set nospell
  endif
endfunction

command! QuickSpellingFix call QuickSpellingFix()
nmap <silent> <Leader>z :QuickSpellingFix<CR>
